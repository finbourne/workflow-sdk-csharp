/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// A request to update multiple Tasks
    /// </summary>
    [DataContract(Name = "BatchUpdateTasksRequest")]
    public partial class BatchUpdateTasksRequest : IEquatable<BatchUpdateTasksRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchUpdateTasksRequest" /> class.
        /// </summary>
        /// <param name="updateTasks">A Dictionary of task IDs to UpdateTaskRequest.</param>
        public BatchUpdateTasksRequest(List<UpdateTaskWithIdAndTriggerRequest> updateTasks = default(List<UpdateTaskWithIdAndTriggerRequest>))
        {
            this.UpdateTasks = updateTasks;
        }

        /// <summary>
        /// A Dictionary of task IDs to UpdateTaskRequest
        /// </summary>
        /// <value>A Dictionary of task IDs to UpdateTaskRequest</value>
        [DataMember(Name = "updateTasks", EmitDefaultValue = true)]
        public List<UpdateTaskWithIdAndTriggerRequest> UpdateTasks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchUpdateTasksRequest {\n");
            sb.Append("  UpdateTasks: ").Append(UpdateTasks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchUpdateTasksRequest);
        }

        /// <summary>
        /// Returns true if BatchUpdateTasksRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchUpdateTasksRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchUpdateTasksRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UpdateTasks == input.UpdateTasks ||
                    this.UpdateTasks != null &&
                    input.UpdateTasks != null &&
                    this.UpdateTasks.SequenceEqual(input.UpdateTasks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UpdateTasks != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateTasks.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
