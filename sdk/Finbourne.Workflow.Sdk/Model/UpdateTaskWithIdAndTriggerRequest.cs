/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// A request to update multiple Tasks Includes a trigger which is supplied from route in single update request
    /// </summary>
    [DataContract(Name = "UpdateTaskWithIdAndTriggerRequest")]
    public partial class UpdateTaskWithIdAndTriggerRequest : IEquatable<UpdateTaskWithIdAndTriggerRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateTaskWithIdAndTriggerRequest" /> class.
        /// </summary>
        /// <param name="taskInstanceId">The ID of the task instance.</param>
        /// <param name="correlationIds">A set of guid identifiers that allow correlation across the application tier.</param>
        /// <param name="fields">Defines the fields associated with the update.</param>
        /// <param name="stackingKey">The key for the Stack that this Task should be added to.</param>
        /// <param name="triggerName">The trigger we want to update the task with.</param>
        public UpdateTaskWithIdAndTriggerRequest(string taskInstanceId = default(string), List<string> correlationIds = default(List<string>), List<TaskInstanceField> fields = default(List<TaskInstanceField>), string stackingKey = default(string), string triggerName = default(string))
        {
            this.TaskInstanceId = taskInstanceId;
            this.CorrelationIds = correlationIds;
            this.Fields = fields;
            this.StackingKey = stackingKey;
            this.TriggerName = triggerName;
        }

        /// <summary>
        /// The ID of the task instance
        /// </summary>
        /// <value>The ID of the task instance</value>
        [DataMember(Name = "taskInstanceId", EmitDefaultValue = true)]
        public string TaskInstanceId { get; set; }

        /// <summary>
        /// A set of guid identifiers that allow correlation across the application tier
        /// </summary>
        /// <value>A set of guid identifiers that allow correlation across the application tier</value>
        [DataMember(Name = "correlationIds", EmitDefaultValue = true)]
        public List<string> CorrelationIds { get; set; }

        /// <summary>
        /// Defines the fields associated with the update
        /// </summary>
        /// <value>Defines the fields associated with the update</value>
        [DataMember(Name = "fields", EmitDefaultValue = true)]
        public List<TaskInstanceField> Fields { get; set; }

        /// <summary>
        /// The key for the Stack that this Task should be added to
        /// </summary>
        /// <value>The key for the Stack that this Task should be added to</value>
        [DataMember(Name = "stackingKey", EmitDefaultValue = true)]
        public string StackingKey { get; set; }

        /// <summary>
        /// The trigger we want to update the task with
        /// </summary>
        /// <value>The trigger we want to update the task with</value>
        [DataMember(Name = "triggerName", EmitDefaultValue = true)]
        public string TriggerName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateTaskWithIdAndTriggerRequest {\n");
            sb.Append("  TaskInstanceId: ").Append(TaskInstanceId).Append("\n");
            sb.Append("  CorrelationIds: ").Append(CorrelationIds).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  StackingKey: ").Append(StackingKey).Append("\n");
            sb.Append("  TriggerName: ").Append(TriggerName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateTaskWithIdAndTriggerRequest);
        }

        /// <summary>
        /// Returns true if UpdateTaskWithIdAndTriggerRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateTaskWithIdAndTriggerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateTaskWithIdAndTriggerRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TaskInstanceId == input.TaskInstanceId ||
                    (this.TaskInstanceId != null &&
                    this.TaskInstanceId.Equals(input.TaskInstanceId))
                ) && 
                (
                    this.CorrelationIds == input.CorrelationIds ||
                    this.CorrelationIds != null &&
                    input.CorrelationIds != null &&
                    this.CorrelationIds.SequenceEqual(input.CorrelationIds)
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.StackingKey == input.StackingKey ||
                    (this.StackingKey != null &&
                    this.StackingKey.Equals(input.StackingKey))
                ) && 
                (
                    this.TriggerName == input.TriggerName ||
                    (this.TriggerName != null &&
                    this.TriggerName.Equals(input.TriggerName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaskInstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.TaskInstanceId.GetHashCode();
                }
                if (this.CorrelationIds != null)
                {
                    hashCode = (hashCode * 59) + this.CorrelationIds.GetHashCode();
                }
                if (this.Fields != null)
                {
                    hashCode = (hashCode * 59) + this.Fields.GetHashCode();
                }
                if (this.StackingKey != null)
                {
                    hashCode = (hashCode * 59) + this.StackingKey.GetHashCode();
                }
                if (this.TriggerName != null)
                {
                    hashCode = (hashCode * 59) + this.TriggerName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TaskInstanceId (string) maxLength
            if (this.TaskInstanceId != null && this.TaskInstanceId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaskInstanceId, length must be less than 36.", new [] { "TaskInstanceId" });
            }

            // TaskInstanceId (string) minLength
            if (this.TaskInstanceId != null && this.TaskInstanceId.Length < 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaskInstanceId, length must be greater than 36.", new [] { "TaskInstanceId" });
            }

            // TaskInstanceId (string) pattern
            Regex regexTaskInstanceId = new Regex(@"^[a-zA-Z0-9\-]+$", RegexOptions.CultureInvariant);
            if (false == regexTaskInstanceId.Match(this.TaskInstanceId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaskInstanceId, must match a pattern of " + regexTaskInstanceId, new [] { "TaskInstanceId" });
            }

            // StackingKey (string) maxLength
            if (this.StackingKey != null && this.StackingKey.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StackingKey, length must be less than 1024.", new [] { "StackingKey" });
            }

            // StackingKey (string) minLength
            if (this.StackingKey != null && this.StackingKey.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StackingKey, length must be greater than 0.", new [] { "StackingKey" });
            }

            // TriggerName (string) maxLength
            if (this.TriggerName != null && this.TriggerName.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TriggerName, length must be less than 1024.", new [] { "TriggerName" });
            }

            // TriggerName (string) minLength
            if (this.TriggerName != null && this.TriggerName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TriggerName, length must be greater than 0.", new [] { "TriggerName" });
            }

            yield break;
        }
    }
}
