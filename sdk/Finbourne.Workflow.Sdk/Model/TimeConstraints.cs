/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// Time constraints for a Recurrence Pattern
    /// </summary>
    [DataContract(Name = "TimeConstraints")]
    public partial class TimeConstraints : IEquatable<TimeConstraints>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeConstraints" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimeConstraints() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeConstraints" /> class.
        /// </summary>
        /// <param name="startDate">Start date of the Recurrence Pattern (required).</param>
        /// <param name="endDate">Optional end date of the Recurrence Pattern.</param>
        /// <param name="timesOfDay">Times of the day to run the Recurrence Pattern (required).</param>
        public TimeConstraints(string startDate = default(string), string endDate = default(string), List<TimeOfDay> timesOfDay = default(List<TimeOfDay>))
        {
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new ArgumentNullException("startDate is a required property for TimeConstraints and cannot be null");
            }
            this.StartDate = startDate;
            // to ensure "timesOfDay" is required (not null)
            if (timesOfDay == null)
            {
                throw new ArgumentNullException("timesOfDay is a required property for TimeConstraints and cannot be null");
            }
            this.TimesOfDay = timesOfDay;
            this.EndDate = endDate;
        }

        /// <summary>
        /// Start date of the Recurrence Pattern
        /// </summary>
        /// <value>Start date of the Recurrence Pattern</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public string StartDate { get; set; }

        /// <summary>
        /// Optional end date of the Recurrence Pattern
        /// </summary>
        /// <value>Optional end date of the Recurrence Pattern</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public string EndDate { get; set; }

        /// <summary>
        /// Times of the day to run the Recurrence Pattern
        /// </summary>
        /// <value>Times of the day to run the Recurrence Pattern</value>
        [DataMember(Name = "timesOfDay", IsRequired = true, EmitDefaultValue = true)]
        public List<TimeOfDay> TimesOfDay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeConstraints {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  TimesOfDay: ").Append(TimesOfDay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeConstraints);
        }

        /// <summary>
        /// Returns true if TimeConstraints instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeConstraints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeConstraints input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.TimesOfDay == input.TimesOfDay ||
                    this.TimesOfDay != null &&
                    input.TimesOfDay != null &&
                    this.TimesOfDay.SequenceEqual(input.TimesOfDay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.TimesOfDay != null)
                {
                    hashCode = (hashCode * 59) + this.TimesOfDay.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StartDate (string) maxLength
            if (this.StartDate != null && this.StartDate.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartDate, length must be less than 20.", new [] { "StartDate" });
            }

            // StartDate (string) minLength
            if (this.StartDate != null && this.StartDate.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartDate, length must be greater than 0.", new [] { "StartDate" });
            }

            // EndDate (string) maxLength
            if (this.EndDate != null && this.EndDate.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndDate, length must be less than 20.", new [] { "EndDate" });
            }

            // EndDate (string) minLength
            if (this.EndDate != null && this.EndDate.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndDate, length must be greater than 0.", new [] { "EndDate" });
            }

            yield break;
        }
    }
}
