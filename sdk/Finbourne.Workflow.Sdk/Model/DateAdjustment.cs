/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// A date adjustment to apply to the scheduled time of an EventHandler with a Finbourne.Workflow.WebApi.Common.Dto.Json.EventHandlers.ScheduleMatchingPattern
    /// </summary>
    [DataContract(Name = "DateAdjustment")]
    public partial class DateAdjustment : IEquatable<DateAdjustment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateAdjustment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DateAdjustment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DateAdjustment" /> class.
        /// </summary>
        /// <param name="deltaDays">The delta to apply to the date part of the scheduled time, in days (required).</param>
        /// <param name="businessDayAdjustment">The Business Day Adjustment (required).</param>
        public DateAdjustment(int deltaDays = default(int), string businessDayAdjustment = default(string))
        {
            this.DeltaDays = deltaDays;
            // to ensure "businessDayAdjustment" is required (not null)
            if (businessDayAdjustment == null)
            {
                throw new ArgumentNullException("businessDayAdjustment is a required property for DateAdjustment and cannot be null");
            }
            this.BusinessDayAdjustment = businessDayAdjustment;
        }

        /// <summary>
        /// The delta to apply to the date part of the scheduled time, in days
        /// </summary>
        /// <value>The delta to apply to the date part of the scheduled time, in days</value>
        [DataMember(Name = "deltaDays", IsRequired = true, EmitDefaultValue = true)]
        public int DeltaDays { get; set; }

        /// <summary>
        /// The Business Day Adjustment
        /// </summary>
        /// <value>The Business Day Adjustment</value>
        [DataMember(Name = "businessDayAdjustment", IsRequired = true, EmitDefaultValue = true)]
        public string BusinessDayAdjustment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DateAdjustment {\n");
            sb.Append("  DeltaDays: ").Append(DeltaDays).Append("\n");
            sb.Append("  BusinessDayAdjustment: ").Append(BusinessDayAdjustment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateAdjustment);
        }

        /// <summary>
        /// Returns true if DateAdjustment instances are equal
        /// </summary>
        /// <param name="input">Instance of DateAdjustment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateAdjustment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DeltaDays == input.DeltaDays ||
                    this.DeltaDays.Equals(input.DeltaDays)
                ) && 
                (
                    this.BusinessDayAdjustment == input.BusinessDayAdjustment ||
                    (this.BusinessDayAdjustment != null &&
                    this.BusinessDayAdjustment.Equals(input.BusinessDayAdjustment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DeltaDays.GetHashCode();
                if (this.BusinessDayAdjustment != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessDayAdjustment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DeltaDays (int) maximum
            if (this.DeltaDays > (int)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeltaDays, must be a value less than or equal to 10000.", new [] { "DeltaDays" });
            }

            // DeltaDays (int) minimum
            if (this.DeltaDays < (int)-10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeltaDays, must be a value greater than or equal to -10000.", new [] { "DeltaDays" });
            }

            // BusinessDayAdjustment (string) minLength
            if (this.BusinessDayAdjustment != null && this.BusinessDayAdjustment.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessDayAdjustment, length must be greater than 1.", new [] { "BusinessDayAdjustment" });
            }

            yield break;
        }
    }
}
