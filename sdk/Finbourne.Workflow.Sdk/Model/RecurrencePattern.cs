/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// The Recurrence Pattern
    /// </summary>
    [DataContract(Name = "RecurrencePattern")]
    public partial class RecurrencePattern : IEquatable<RecurrencePattern>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrencePattern" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecurrencePattern() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrencePattern" /> class.
        /// </summary>
        /// <param name="timeConstraints">timeConstraints (required).</param>
        /// <param name="dateRegularity">dateRegularity (required).</param>
        /// <param name="businessDayAdjustment">The Business Day Adjustment (required).</param>
        public RecurrencePattern(TimeConstraints timeConstraints = default(TimeConstraints), DateRegularity dateRegularity = default(DateRegularity), string businessDayAdjustment = default(string))
        {
            // to ensure "timeConstraints" is required (not null)
            if (timeConstraints == null)
            {
                throw new ArgumentNullException("timeConstraints is a required property for RecurrencePattern and cannot be null");
            }
            this.TimeConstraints = timeConstraints;
            // to ensure "dateRegularity" is required (not null)
            if (dateRegularity == null)
            {
                throw new ArgumentNullException("dateRegularity is a required property for RecurrencePattern and cannot be null");
            }
            this.DateRegularity = dateRegularity;
            // to ensure "businessDayAdjustment" is required (not null)
            if (businessDayAdjustment == null)
            {
                throw new ArgumentNullException("businessDayAdjustment is a required property for RecurrencePattern and cannot be null");
            }
            this.BusinessDayAdjustment = businessDayAdjustment;
        }

        /// <summary>
        /// Gets or Sets TimeConstraints
        /// </summary>
        [DataMember(Name = "timeConstraints", IsRequired = true, EmitDefaultValue = true)]
        public TimeConstraints TimeConstraints { get; set; }

        /// <summary>
        /// Gets or Sets DateRegularity
        /// </summary>
        [DataMember(Name = "dateRegularity", IsRequired = true, EmitDefaultValue = true)]
        public DateRegularity DateRegularity { get; set; }

        /// <summary>
        /// The Business Day Adjustment
        /// </summary>
        /// <value>The Business Day Adjustment</value>
        [DataMember(Name = "businessDayAdjustment", IsRequired = true, EmitDefaultValue = true)]
        public string BusinessDayAdjustment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecurrencePattern {\n");
            sb.Append("  TimeConstraints: ").Append(TimeConstraints).Append("\n");
            sb.Append("  DateRegularity: ").Append(DateRegularity).Append("\n");
            sb.Append("  BusinessDayAdjustment: ").Append(BusinessDayAdjustment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecurrencePattern);
        }

        /// <summary>
        /// Returns true if RecurrencePattern instances are equal
        /// </summary>
        /// <param name="input">Instance of RecurrencePattern to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecurrencePattern input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TimeConstraints == input.TimeConstraints ||
                    (this.TimeConstraints != null &&
                    this.TimeConstraints.Equals(input.TimeConstraints))
                ) && 
                (
                    this.DateRegularity == input.DateRegularity ||
                    (this.DateRegularity != null &&
                    this.DateRegularity.Equals(input.DateRegularity))
                ) && 
                (
                    this.BusinessDayAdjustment == input.BusinessDayAdjustment ||
                    (this.BusinessDayAdjustment != null &&
                    this.BusinessDayAdjustment.Equals(input.BusinessDayAdjustment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimeConstraints != null)
                {
                    hashCode = (hashCode * 59) + this.TimeConstraints.GetHashCode();
                }
                if (this.DateRegularity != null)
                {
                    hashCode = (hashCode * 59) + this.DateRegularity.GetHashCode();
                }
                if (this.BusinessDayAdjustment != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessDayAdjustment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BusinessDayAdjustment (string) minLength
            if (this.BusinessDayAdjustment != null && this.BusinessDayAdjustment.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessDayAdjustment, length must be greater than 1.", new [] { "BusinessDayAdjustment" });
            }

            yield break;
        }
    }
}
